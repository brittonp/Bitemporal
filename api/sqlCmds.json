{
	"Sql": {
		"PingDatabase": "SELECT db.* FROM sys.databases db WHERE db.name = DB_NAME() FOR JSON AUTO, WITHOUT_ARRAY_WRAPPER;",
		"Department": "SELECT \n\td.dept_hist_id,\n\td.dept_id,\n\td.dept_name,\n\td.location,\n\td.valid_from,\n\tCASE\n\t\tWHEN d.valid_to = btd.fn_infinity() THEN NULL\n\t\tELSE d.valid_to\n\tEND AS valid_to,\n\td.tran_from,\n\tCASE\n\t\tWHEN d.tran_to = btd.fn_infinity() THEN NULL\n\t\tELSE d.tran_to\n\tEND AS tran_to\nFROM\n\tbtd.department d\nWHERE\n\td.dept_id = @deptId\nORDER BY\n\td.dept_hist_id\nFOR\n\tJSON AUTO,\n\tINCLUDE_NULL_VALUES;",
		"Employee": "SELECT\n\te.emp_hist_id,\n\te.emp_id,\n\te.dept_id,\n\te.first_name,\n\te.last_name,\n\te.job_title,\n\te.hire_date,\n\te.term_date,\n\te.valid_from,\n\tCASE\n\t\tWHEN e.valid_to = btd.fn_infinity() THEN NULL\n\t\tELSE e.valid_to\n\tEND AS valid_to,\n\te.tran_from,\n\tCASE\n\t\tWHEN e.tran_to = btd.fn_infinity() THEN NULL\n\t\tELSE e.tran_to\n\tEND AS tran_to\n\tFROM\n\tbtd.employee e\nWHERE\n\te.emp_id = @empId\nORDER BY\n\te.emp_hist_id\nFOR\n\tJSON AUTO,\n\tINCLUDE_NULL_VALUES;",
		"Query": "WITH \n\tas_of_employee \nAS\n(\n\tSELECT \n\t\t*\n\tFROM \n\t\tbtd.employee\n\tWHERE \n\t\t@valid_date >= valid_from\n\tAND \n\t\t@valid_date < valid_to\n\tAND \n\t\t@tran_date >= tran_from\n\tAND \n\t\t@tran_date < tran_to\n),\n\tas_of_department \nAS\n(\n\tSELECT \n\t\t*\n\tFROM \n\t\tbtd.department\n\tWHERE \n\t\t@valid_date >= valid_from\n\tAND \n\t\t@valid_date < valid_to\n\tAND \n\t\t@tran_date >= tran_from\n\tAND \n\t\t@tran_date < tran_to\n)\n-- ============================================================\n-- Join filtered tables\n-- ============================================================\nSELECT\n\t@tran_date AS tran_date, \n\t@valid_date AS valid_date,\n\td.dept_hist_id,\n\td.dept_name,\n\te.emp_hist_id,\n\te.emp_id,\n\te.first_name,\n\te.last_name,\n\te.job_title,\n\te.hire_date,\n\te.term_date\nFROM \n\tas_of_department d\nLEFT JOIN\n\tas_of_employee e\nON \n\te.dept_id = d.dept_id\nWHERE \n\td.dept_id = 10\nORDER BY \n\td.dept_hist_id,\n\te.emp_hist_id\nFOR\n\tJSON PATH,\n\tINCLUDE_NULL_VALUES;",
		"ResetData": "EXEC btd.reset_data",
		"UpdateCmds": {
			"UpdateDept1": {
				"title": "Department name change",
				"description": "Department 10 changes its name to 'New Sales' effective from 1-Oct-2025.",
				"sql": "UPDATE\n\tbtd.department\nSET\n\tdept_name = 'New Sales',\n\tvalid_from = '2025-10-01'\nWHERE\n\tdept_id = 10",
				"explanation": "This command is intercepted by an \"INSTEAD OF\" trigger that makes the following changes:<ol><li>UPDATE - the Department record covering the transaction time equal to the current system time and the valid time equal to 1-Oct-2025, for which <em>tran_to</em> is set to the current system datetime (previously it was infinity);</li><li>INSERT - a record with <em>dept_name</em> set to 'New Sales', <em>tran_from</em> to the current system datetime, <em>tran_to</em> to infinity, <em>valid_from</em> to 1-Oct-2025 and <em>valid_to</em> to the updated record's <em>valid_to</em> (infinity);</li><li>INSERT - a 'back-fill' record which is copy of the initial updated record but with <em>tran_to</em> set to infinity and <em>valid_to</em> to 1-Oct-2025.</li></ol>"
			},
			"UpdateDept2": {
				"title": "Retrospective Department name change",
				"description": "Department 10 retrospectively changes its name to 'Original Sales' effective from 1-Jun-2020.",
				"sql": "UPDATE\n\tbtd.department\nSET\n\tdept_name = 'Original Sales',\n\tvalid_from = '2020-06-01'\nWHERE\n\tdept_id = 10",
				"explanation": "This command is intercepted by an \"INSTEAD OF\" trigger that makes the following changes:<ol><li>UPDATE - the Department record covering the transaction time equal to the current system time and the valid time equal to 1-Jun-2020, for which <em>tran_to</em> is set to the current system datetime (previously it was infinity);</li><li>INSERT - a record with <em>dept_name</em> set to 'Original Sales', <em>tran_from</em> to the current system datetime, <em>tran_to</em> to infinity, <em>valid_from</em> to 1-Jun-2020 and <em>valid_to</em> to the updated record's <em>valid_to</em>;</li><li>INSERT - a 'back-fill' record which is copy of the initial updated record but with <em>tran_to</em> set to infinity and <em>valid_to</em> to 1-Jun-2020.</li></ol>"
			},
			"UpdateEmp1": {
				"title": "Employee role change",
				"description": "Employee 100 is promoted to 'Director of Sales' effective from 1-Oct-2025.",
				"sql": "UPDATE btd.Employee\nSET\n\tjob_title = 'Director of Sales',\n\tvalid_from = '2025-10-01'\nWHERE\n\temp_id = 100",
				"explanation": "This command is intercepted by an \"INSTEAD OF\" trigger that makes the following changes:<ol><li>UPDATE - the Employee record covering the transaction time equal to the current system time and the valid time equal to 1-Oct-2025, for which <em>tran_to</em> is set to the current system datetime (previously it was infinity);</li><li>INSERT - a record with <em>job_title</em> set to 'Director of Sales', <em>tran_from</em> to the current system datetime, <em>tran_to</em> to infinity, <em>valid_from</em> to 1-Oct-2025 and <em>valid_to</em> to the updated record's <em>valid_to</em> (infinity);</li><li>INSERT - a 'back-fill' record which is copy of the initial updated record but with <em>tran_to</em> set to infinity and <em>valid_to</em> to 1-Oct-2025.</li></ol>"
			}
			}
	}
}